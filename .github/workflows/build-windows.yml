name: Build Windows EXE and attach to release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to attach the built EXE to (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
  push:
    tags: ['v*']

# Give the workflow token permission to create and modify releases/assets
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies and PyInstaller
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Windows EXE with PyInstaller
        shell: pwsh
        run: >
          python -m PyInstaller --onefile --add-data "paupahan;paupahan" --add-data "paupahan\\static;paupahan\\static" --add-data "paupahan\\tenants\\templates;paupahan\\tenants\\templates" --name PaupahanApp run_app.py

      - name: Smoke-test built EXE on Windows runner
        shell: pwsh
        run: |
          Write-Host "Smoke test: start EXE and probe http://127.0.0.1:8000/"
          $exe = Join-Path $PWD 'dist\PaupahanApp.exe'
          if (-Not (Test-Path $exe)) { Write-Error "EXE not found: $exe"; exit 1 }

          $proc = Start-Process -FilePath $exe -ArgumentList '' -PassThru

          # wait for server to start (poll up to 15s)
          $max = 15; $i = 0; $ok = $false
          while ($i -lt $max) {
            try {
              $resp = Invoke-WebRequest -Uri 'http://127.0.0.1:8000/' -UseBasicParsing -TimeoutSec 5
              if ($resp.StatusCode -eq 200) { $ok = $true; break }
            } catch {
              # ignore and retry
            }
            Start-Sleep -Seconds 1
            $i++
          }

          if (-not $ok) {
            Write-Host "Smoke test failed: unable to fetch http://127.0.0.1:8000/"
            $tempLog = Join-Path $env:TEMP 'paupahan_run.log'
            if (Test-Path $tempLog) { Write-Host "---- last lines of $tempLog ----"; Get-Content $tempLog -Tail 200 }
            try { Stop-Process -Id $proc.Id -Force -ErrorAction SilentlyContinue } catch {}
            exit 1
          } else {
            Write-Host "Smoke test passed: HTTP 200 received"
            try { Stop-Process -Id $proc.Id -Force -ErrorAction SilentlyContinue } catch {}
          }

      - name: Upload EXE as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: PaupahanApp-exe
          path: dist/PaupahanApp.exe

      - name: Create or get release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || (startsWith(github.ref, 'refs/tags/') && github.ref_name) || github.ref_name }}
          name: ${{ github.event.inputs.tag || (startsWith(github.ref, 'refs/tags/') && github.ref_name) || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload EXE to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/PaupahanApp.exe
          asset_name: PaupahanApp.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
